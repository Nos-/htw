
prakt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000196  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  0000022e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000058  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000d4  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000067  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000115  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d1  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_3>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  c6:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_16>:
int muster = 0x0F;
int temp = 0;
int right = 1; // 0: nach links, anderes: nach rechts

// Interrupt Anweisung für Timer 0 Overflow
ISR(TIMER0_OVF_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	//PORTB = ~PORTB;
	temp = PORTB;
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	28 2f       	mov	r18, r24
  e2:	80 93 04 01 	sts	0x0104, r24
  e6:	10 92 05 01 	sts	0x0105, r1
	if (right){	
  ea:	80 91 02 01 	lds	r24, 0x0102
  ee:	90 91 03 01 	lds	r25, 0x0103
  f2:	89 2b       	or	r24, r25
  f4:	39 f0       	breq	.+14     	; 0x104 <__vector_16+0x36>
		PORTB >>= 1;
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	86 95       	lsr	r24
  fa:	88 bb       	out	0x18, r24	; 24
		if (temp & (1<<0)){
  fc:	20 ff       	sbrs	r18, 0
  fe:	07 c0       	rjmp	.+14     	; 0x10e <__vector_16+0x40>
			PORTB |= (1<< 7);
 100:	c7 9a       	sbi	0x18, 7	; 24
 102:	05 c0       	rjmp	.+10     	; 0x10e <__vector_16+0x40>
		}
	} else {
		PORTB <<= 1;
 104:	88 b3       	in	r24, 0x18	; 24
 106:	88 0f       	add	r24, r24
 108:	88 bb       	out	0x18, r24	; 24
		if (temp & (1<<7)){
 10a:	27 fd       	sbrc	r18, 7
			PORTB |= 1;
 10c:	c0 9a       	sbi	0x18, 0	; 24
		}
	}
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_3>:

// Interrupt Anweisung für Schalter 1
ISR(INT2_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	if (right){
 12c:	80 91 02 01 	lds	r24, 0x0102
 130:	90 91 03 01 	lds	r25, 0x0103
 134:	89 2b       	or	r24, r25
 136:	29 f0       	breq	.+10     	; 0x142 <__vector_3+0x24>
		right = 0;
 138:	10 92 03 01 	sts	0x0103, r1
 13c:	10 92 02 01 	sts	0x0102, r1
 140:	06 c0       	rjmp	.+12     	; 0x14e <__vector_3+0x30>
	} else {
		right = 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 03 01 	sts	0x0103, r25
 14a:	80 93 02 01 	sts	0x0102, r24
	}
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:

int main (void){
	DDRB = 0xFF;	// B komplett als Ausgabe definieren
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;	// D komplett als Eingang definieren
 160:	11 ba       	out	0x11, r1	; 17
	
	// Timer: (alle 262ms)
	TCCR0 = (1 << CS02) | (1 << CS01) |(1 << CS00);
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
 166:	87 b7       	in	r24, 0x37	; 55
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	87 bf       	out	0x37, r24	; 55

	// Tasten-Interrupt konfigurieren:
	EICRA |= (1 << ISC21);
 16c:	80 91 6a 00 	lds	r24, 0x006A
 170:	80 62       	ori	r24, 0x20	; 32
 172:	80 93 6a 00 	sts	0x006A, r24
	EICRA &= ~(1 << ISC20);
 176:	80 91 6a 00 	lds	r24, 0x006A
 17a:	8f 7e       	andi	r24, 0xEF	; 239
 17c:	80 93 6a 00 	sts	0x006A, r24
	EIMSK = (1 << INT2);
 180:	84 e0       	ldi	r24, 0x04	; 4
 182:	89 bf       	out	0x39, r24	; 57

	
	PORTB |= muster;
 184:	88 b3       	in	r24, 0x18	; 24
 186:	90 91 00 01 	lds	r25, 0x0100
 18a:	89 2b       	or	r24, r25
 18c:	88 bb       	out	0x18, r24	; 24

	sei();	// Interrupts aktivieren
 18e:	78 94       	sei
 190:	ff cf       	rjmp	.-2      	; 0x190 <main+0x34>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
