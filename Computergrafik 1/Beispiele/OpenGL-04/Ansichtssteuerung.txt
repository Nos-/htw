// global:

GLfloat pi=3.14159;
GLfloat alpha=0.2, beta=0.8, dist=5, DELTA=0.5;

void keyboard(unsigned char theKey, int mouseX, int mouseY) {
  GLint x=mouseX;
  GLint y=height-mouseY;		
  switch (theKey)	{
    case 'v': dist-=DELTA; display(); break;
    case 'z': dist+=DELTA; display(); break;
    case 'e': exit(-1); }}

void special(int specKey, int mouseX, int mouseY) {
  GLint x=mouseX;
  GLint y=height-mouseY;	
  switch (specKey) {
    case GLUT_KEY_LEFT: alpha-=DELTA; display(); break;
    case GLUT_KEY_RIGHT: alpha+=DELTA; display(); break;
    case GLUT_KEY_UP: beta-=DELTA; display(); break;
    case GLUT_KEY_DOWN: display(); beta+=DELTA; break; } }

void mouse(int theButton, int State, int mouseX, int mouseY) {
  GLint x=mouseX; GLint y=height-mouseY;	}

void motion(int mouseX, int mouseY) {
  if(mouseX<(width/2)) { alpha-=(mouseX-(width/2))/10000.0; } 
    else { alpha-=(mouseX-(width/2))/10000.0; }
  if(mouseY<(height/2)) { beta-=(mouseY-(height/2))/10000.0; } 
    else { beta-=(mouseY-(height/2))/10000.0; }
  display(); }

// display:

GLfloat viewpoint[3];
viewpoint[0]=dist*sin(beta)*sin(alpha);
viewpoint[1]=dist*cos(beta);
viewpoint[2]=dist*sin(beta)*cos(alpha);
glViewport(0,0,width,height);
glm::mat4 Projection=glm::perspective(45.0f,1.0f,0.1f,100.f); 
glm::mat4 View=glm::lookAt(glm::vec3(viewpoint[0],viewpoint[1],viewpoint[2]),
glm::vec3 (0.5,0.5,0.5),glm::vec3(0.0,cos(beta-3.141593*0.5),0.0));
glm::mat4 Model=glm::mat4(1.0f);
glm::mat4 ModelViewProjection = glm::mat4(1.0f);
//glm::mat4 ModelViewProjection=Projection*View*Model;
GLuint Location=glGetUniformLocation(program,"ModelViewProjection");
glUniformMatrix4fv(Location,1,GL_FALSE,&ModelViewProjection[0][0]);

// main:

 glutKeyboardFunc(keyboard);
 glutSpecialFunc(special);
 glutMouseFunc(mouse);
 glutMotionFunc(motion);

// vertex shader:

uniform mat4 ModelViewProjection;
gl_Position = ModelViewProjection*vPosition;
